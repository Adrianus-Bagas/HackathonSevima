'use client'

import { GetRoute, GetStops } from "@/services/fetcher";
import { useEffect, useState } from "react"
import { Select } from 'antd';

export default function RoutePlanner() {

    const grid = [
        [
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1
        ],
        [
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0
        ],
        [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0
        ],
        [
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1
        ],
        [
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1
        ],
        [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
        ],
        [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1
        ],
        [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1
        ],
        [
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1
        ],
        [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1
        ],
        [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1
        ],
        [
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1
        ],
        [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0
        ],
        [
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0
        ],
        [
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0
        ],
        [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1
        ],
        [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1
        ],
        [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ],
        [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1
        ]
    ];
    const [stops, setStops] = useState<{
        id: number;
        x_axis: number;
        y_axis: number;
        name: string;
    }[]>([]);
    const [from, setFrom] = useState<number>(0);
    const [to, setTo] = useState<number>(0);
    const [routes, setRoutes] = useState<number[][]>([]);
    const [distance, setDistance] = useState<number>(0);

    useEffect(()=>{
        GetStops().then((value)=>setStops(value.result)).catch((err)=>console.log(err))
    }, [])

    const getRoute = () => {
        if(from && to) {
            GetRoute(grid, from, to).then((value)=>{
                setRoutes(value.path)
                setDistance(value.distance)
            }).catch((err)=>console.log(err))
        }
    }

    return <>
    <div className="py-5">
        <p className="text-3xl text-center">Route Planner</p>
        <div className="flex justify-center items-center my-5">
            <div className="px-3">From</div>
        <Select
      style={{ width: 120 }}
      onChange={(value)=>setFrom(value)}
      options={stops.map((item)=>{
        return {
            value: item.id,
            label: item.name
        }
      })}
    />
        </div>
        <div className="flex justify-center items-center my-5">
            <div className="px-3">To</div>
        <Select
      style={{ width: 120 }}
      onChange={(value)=>setTo(value)}
      options={stops.map((item)=>{
        return {
            value: item.id,
            label: item.name
        }
      })}
    />
        </div>
        <div className="bg-black transition duration-300 hover:opacity-50 text-white p-3 w-fit">
            <button onClick={getRoute} disabled={!from || !to}>Get Route</button>
        </div>
        <div>
        <p className="text-xl text-center">Jarak Tempuh: {distance}</p>
        </div>
        {grid.length > 0 && 
        grid.map((item, idx)=>{
            return <>
            <div className="flex justify-center items-center">
            {item.map((value, index)=>{
                return <div key={index} className={`w-10 h-10 border-2 border-black ${value === 1 ?  routes.find((route)=>route[0] === idx && route[1] === index) ? 'bg-green-500' : 'bg-white' : 'bg-black'} flex justify-center items-center`}>
                    {stops.find((value)=> value.x_axis === idx && value.y_axis ===index) ? stops.find((value)=> value.x_axis === idx && value.y_axis ===index)?.name.replace('Terminal ', '') : ''}
                </div>
            })}
            </div>
            </>
            })
        }
    </div>
    </>
}